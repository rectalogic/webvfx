// Copyright (c) 2011 Hewlett-Packard Development Company, L.P. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
/*!
@page effects_authoring Effects Authoring

%WebVfx supports @ref qml_effects_authoring for developing video effects.
%WebVfx loads the QML effect content and exposes a
JavaScript context object named @c webvfx to the effect implementation.

If the effect will need to access frames of video,
it should register names for each image using @c webvfx.registerImageName

For example:
@code
webvfx.registerImageName("SourceImage);
@endcode

The effect can request additional named parameters as part of initialization
by calling @c webvfx.getStringParameter(name) or
@c webvfx.getNumberParameter(name)

The effect must connect the @c webvfx.renderRequested(time) signal.
See @ref qml_effects_authoring for how to connect to this signal.

Now %WebVfx will start rendering frames of video. It will pull the current
frame from each of the video sources specified with @c webvfx.registerImageName
then invoke the @c webvfx.renderRequested(time) signal.
The time is a normalized time from 0 to 1.0 indicating the position
in the transition or effect. The effect should then request any images
it requires each time it handles
@c renderRequested.  Images can be requested by calling
@c webvfx.getImage(name) where @c name is the string image name specified
in @c webvfx.registerImageName. See @ref qml_effects_authoring
for how to use the returned image object.

The effect should configure itself using the @c time value and the
images it retrieved before returning from the @c renderRequested slot.


@section qml_effects_authoring QML Effects Authoring

Effects can be authored using QtQuick
<a href="http://doc.qt.nokia.com/latest/qtquick.html">QML</a>,
a declarative UI language.

The @c webvfx.renderRequested(time) signal can be handled using
the QML
<a href="http://doc.qt.nokia.com/latest/qml-connections.html">Connections</a>
element with @c webvfx as the target.
The @c time parameter is available to the code, e.g.:
@code
Connections {
    target: webvfx
    onRenderRequested: {
        effect.textureImage = webvfx.getImage("sourceImage");
        console.log("render: " + time);
    }
}
@endcode

Video frame images retrieved via @c webvfx.getImage(name) are QImage
objects. These can be assigned directly to some QML properties,
e.g. <a href="http://doc.qt.nokia.com/qt-quick3d-snapshot/qml-effect.html#textureImage-prop">Effect.textureImage</a>.
Other QML properties require an image URL - this can be retrived via
@c webvfx.getImageUrl(name). It is more efficient to use the image
directly when possible, instead of the URL.

@sa See the QML demo
@ref examples/filter-demo.qml "demo/examples/filter-demo.qml"

QML is more interesting as a video effects technology when it
is extended with 3D support - see @ref effects_3d.

@subsection web_effects_shader_authoring WebGL GLSL Shader Effects Authoring

QML effects can be written using fragment shaders.
These must be compiled into @c qsb files first using the
<a href="https://doc.qt.io/qt-6/qtshadertools-qsb.html">qsb</a> shader tool.

See the sample CrossZoom and PageCurl shader demos for complete examples:
@li @ref examples/transition-shader-crosszoom.qml "demo/examples/transition-shader-crosszoom.qml"
@li @ref examples/transition-shader-pagecurl.qml "demo/examples/transition-shader-pagecurl.qml"


@section effects_authoring_tools Tools

A simple tool is provided to help authoring effects.

@c webvfx_viewer (<tt>%WebVfx Viewer.app</tt> on MacOS) allows you to
load your QML effects and exposes the @c webvfx context object
to them, and generates images that your effect can request using
@c webvfx.getImage(name).
It has a slider along the bottom that lets you control the rendering time
(0..1.0) and a tab to let you set the rendering size.
 */
