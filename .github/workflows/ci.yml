name: CI
on:
  push:
    branches:
      - '*'

jobs:

  linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Buildx
      uses: docker/build-push-action@v2
      with:
        push: false
        context: docker
        tags: webvfx
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
    # https://github.com/docker/build-push-action/issues/252
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    - name: Test
      run: docker/docker-run.sh
    - name: Upload Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: failed-images-linux
        path: /webvfx/build/linux/output

  macos:
    runs-on: macos-11
    env:
      QT_VER: 6.2.2
      MLT_VER: 7.4.0
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Provision
      run: |
        sudo xcode-select -s "/Applications/Xcode_13.2.1.app"
        brew install imagemagick pkg-config cmake ffmpeg
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ env.QT_VER }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: ${{ env.QT_VER }}
        modules: 'qtquick3d qtshadertools qtquicktimeline'
    - name: Cache MLT
      uses: actions/cache@v2
      id: mlt-cache
      with:
        path: mlt-${MLT_VER}.tar
        key: ${{ runner.os }}-mlt-${{ env.MLT_VER }}-v4
    - name: Build MLT
      run: |
        if ! tar -tf mlt-${MLT_VER}.tar > /dev/null; then
          curl -L https://github.com/mltframework/mlt/releases/download/v${MLT_VER}/mlt-${MLT_VER}.tar.gz | tar xzf -
          cd mlt-${MLT_VER}
          mkdir /tmp/mlt
          cmake -DCMAKE_INSTALL_PREFIX=/tmp/mlt .
          make
          cmake --install .
          cd ..
          tar -C /tmp/mlt -cf mlt-${MLT_VER}.tar .
        fi
    - name: Install MLT
      run: |
        sudo tar -C /usr/local/ --no-same-owner --modification-time -xf mlt-${MLT_VER}.tar
    - name: Install WebVfx
      run: |
        mkdir build
        cd build
        qmake ..
        sudo make install
    - name: Test
      # Disable for now, no GPU on macos
      # https://github.com/actions/virtual-environments/issues/1779#issuecomment-707071183
      if: false
      run: |
        cd demo/mlt/tests
        mkdir -p fixtures/output
        ./runtests fixtures/macos fixtures/output
    - name: Failed Artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: failed-images-macos
        path: demo/mlt/tests/fixtures/output
